:PROPERTIES:
:ID:       0CBCCEE0-6392-4EC6-BC6A-AB837306B7EB
:ROAM_ALIASES: ox-html-markdown-style-footnotes
:END:
#+title: ox-html-markdown-style-footnotes: Markdown-style footnotes for ox-html.el
#+author: Jeff Kreeftmeijer
#+date: 2023-05-11
#+options: toc:nil num:nil

Ox-html-markdown-style footnotes is an Emacs extension that provides an option to export Org mode files to HTML with footnotes that resemble those typical in documents generated from Markdown files.

* Overview

#+headers: :eval no
#+begin_src org :tangle test/fixtures/footnote.org
  Hello, world![fn:1]

  [fn:1] A footnote.

  With a second paragraph.
#+end_src

The Org document above produces the following footnotes when exported to HTML:

#+headers: :cache yes
#+headers: :exports results
#+headers: :results scalar
#+headers: :wrap src html
#+begin_src shell
  emacs test/fixtures/footnote.org --batch \
        --eval '(setq org-html-doctype "html5")' \
        --eval '(setq org-html-preamble nil)' \
        --eval '(setq org-html-postamble nil)' \
        --funcall org-html-export-to-html
  cat test/fixtures/footnote.html | tail -n17 | head -n11
#+end_src

#+RESULTS[e3c674d15385b8d20aa5757ce493e4dbe2a473d0]:
#+begin_src html
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
A footnote.
</p>

<p class="footpara">
With a second paragraph.
</p></div></div>
#+end_src

Footnotes consist of a link back to the place the footnote was referenced in the document and a =<div>= with the footnote's contents.
The contents div, being a block element, is printed on a seperate line unless the default styling is loaded.
The styling makes the footnotes appear inline, which places them behind the footnote link, but also inlines each paragraph for multi-paragraph footnotes:

#+caption: Org's default footnote styling
[[./before.png]]

Some flavors of Markdown use [[https://www.markdownguide.org/extended-syntax/#footnotes][ordered lists for footnotes]].
These don't rely on styling, and they don't inline paragraphs in the footnotes.

To use Markdown-style footnotes in Org, ox-html-markdown footnotes advises the =org-html-footnote-section= function to overwrite its implementation.
This new function keeps most of the output the same, but uses an ordered list instead of nested =<div>= elements.
It also uses a backlink with an arrow, which resembles the Markdown tradition:

#+headers: :cache yes
#+headers: :exports results
#+headers: :results scalar
#+headers: :wrap src html
#+begin_src shell
  cp test/fixtures/footnote.org test/fixtures/footnote-2.org
  emacs --batch \
        --load=ox-html-markdown-style-footnotes.el \
        --file=test/fixtures/footnote-2.org \
        --eval '(setq org-html-doctype "html5")' \
        --eval '(setq org-html-head-include-default-style nil)' \
        --eval '(setq org-html-preamble nil)' \
        --eval '(setq org-html-postamble nil)' \
        --eval '(org-html-markdown-style-footnotes-add)' \
        --eval '(setq org-html-markdown-style-footnotes t)' \
        --funcall org-html-export-to-html
  cat test/fixtures/footnote-2.html | tail -n17 | head -n15
#+end_src

#+RESULTS[193dd472e5af73e7b6a24904afdcba201c58e30a]:
#+begin_src html
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">
<ol>
<li id="fn.1" class="footdef" role="doc-footnote" tabindex="-1"><p class="footpara">
A footnote.
</p>

<p class="footpara">
With a second paragraph.
</p> <a href="#fnr.1" role="doc-backlink">↩&#65038;</a></li>
</ol>

</div>
</div></div>
#+end_src

This results in footnotes with support for multiple paragraphs, that work without additional styling:

#+caption: Footnotes with ox-html-markdown-style-footnotes
[[./after.png]]

* Implementation

In [[https://git.savannah.gnu.org/cgit/emacs/org-mode.git/tree/lisp/ox-html.el?h=release_9.6.5#n1858][Org mode 9.6.5]], the ~org-html-footnote-section~ looks like this:

#+headers: :noweb yes
#+begin_src emacs-lisp
  (defun org-html-footnote-section (info)
    "Format the footnote section.
  INFO is a plist used as a communication channel."
    (pcase (org-export-collect-footnote-definitions info)
      (`nil nil)
      (definitions
       (format
        (plist-get info :html-footnotes-section)
        (org-html--translate "Footnotes" info)
        (format
         "\n%s\n"
         (mapconcat
          (lambda (definition)
            (pcase definition
              (`(,n ,_ ,def)
               <<footnote-definitions>>)))
          definitions
          "\n"))))))
#+end_src

The function returns nothing if there are no footnotes in the document, or uses the format set in ~:html-footnotes-section~ to print each footnote.
The interesting part is executed for each footnote, and wraps each footnote in a ~div~ element with a link back to where the footnote is referenced from:

#+name: footnote-definitions
#+begin_src emacs-lisp
  (let ((inline? (not (org-element-map def org-element-all-elements
                        #'identity nil t)))
        (anchor (org-html--anchor
                 (format "fn.%d" n)
                 n
                 (format " class=\"footnum\" href=\"#fnr.%d\" role=\"doc-backlink\"" n)
                 info))
        (contents (org-trim (org-export-data def info))))
    (format "<div class=\"footdef\">%s %s</div>\n"
            (format (plist-get info :html-footnote-format) anchor)
            (format "<div class=\"footpara\" role=\"doc-footnote\">%s</div>"
                    (if (not inline?) contents
                      (format "<p class=\"footpara\">%s</p>"
                              contents)))))
#+end_src

** Advising ~org-html-footnote-section~

#+headers: :exports none
#+headers: :tangle ox-html-markdown-style-footnotes.el
#+headers: :noweb yes
#+begin_src emacs-lisp
  ;;; ox-html-markdown-style-footnotes.el --- Markdown-style footnotes for ox-html.el

  ;;; Commentary:

  ;; ox-html-markdown-style-footnotes replaces the ox-html's default
  ;; footnotes with an HTML ordered list, inspired by footnotes sections
  ;; of some Markdown implementations.

  ;;; Code:

  <<require-ox-html>>

  <<options>>

  <<org-html-markdown-style-footnotes--section>>

  <<add-and-remove>>

  <<provide>>

  ;;; ox-html-markdown-style-footnotes.el ends here
#+end_src

To override the footnotes function, first require ~ox-html~, the HTML exporter:

#+name: require-ox-html
#+begin_src emacs-lisp
  (require 'ox-html)
#+end_src

Define the ~org-html-markdown-style-footnotes~ variable, which is used to enable and disable the package after it's included:

#+name: options
#+begin_src emacs-lisp
(defgroup org-export-html-markdown-style-footnotes nil
  "Options for org-html-markdown-style-footnotes."
  :tag "Org HTML Markdown-style footnotes"
  :group 'org-export
  :version "24.4"
  :package-version '(Org . "8.0"))

(defcustom org-html-markdown-style-footnotes nil
  "Non-nil means to use Markdown-style footnotes in the exported document."
  :group 'org-export-html-markdown-style-footnotes
  :version "24.4"
  :package-version '(Org . "8.0")
  :type 'boolean)
#+end_src

Then, define an updated version of ~org-html-footnote-section~, which is mostly a copy of the original.
If the ~org-html-markdown-style-footnotes~ variable is non-nil, the updated copy is used, which is different from the original in multiple ways:

- It turns the footnote section into an ordered list by wrapping it in ~<ol>~ tags
- It switches from a ~<div>~ element to a list by wrapping each footnote in ~<li>~ tags
- It moves the anchor link, which points back at the footnote reference, to the end of the footnote, and uses a Unicode arrow (↩︎) instead of the footnote's number
- Removes the logic checking if a footnote can be inlined, as it always prints the contents as-is

The updated copy is defined as ~org-html-markdown-style-footnotes--section~:

#+name: org-html-markdown-style-footnotes--section
#+begin_src emacs-lisp
  (defun org-html-markdown-style-footnotes--section (orig-fun info)
    (if org-html-markdown-style-footnotes
	(pcase (org-export-collect-footnote-definitions info)
	  (`nil nil)
	  (definitions
	   (format
	    (plist-get info :html-footnotes-section)
	    (org-html--translate "Footnotes" info)
	    (format
	     "<ol>\n%s</ol>\n"
	     (mapconcat
	      (lambda (definition)
		(pcase definition
		  (`(,n ,_ ,def)
		   (format
		    "<li id=\"fn.%d\" class=\"footdef\" role=\"doc-footnote\" tabindex=\"-1\">%s %s</li>\n"
                    n
		    (org-trim (org-export-data def info))
		    (format "<a href=\"#fnr.%d\" role=\"doc-backlink\">↩&#65038;</a>" n)))))
	      definitions
	      "\n")))))
      (funcall orig-fun info)))
#+end_src

To replace the original, the new function is added as advice.
The package includes functions to easily enable and disable itself through adding and removing its advice:

#+name: add-and-remove
#+begin_src emacs-lisp
    ;;;###autoload
  (defun org-html-markdown-style-footnotes-add ()
    (interactive)
    (advice-add 'org-html-footnote-section
                :around #'org-html-markdown-style-footnotes--section))

  (defun org-html-markdown-style-footnotes-remove ()
    (interactive)
    (advice-remove 'org-html-footnote-section
                   #'org-html-markdown-style-footnotes--section))
#+end_src

The ~:around~ [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Advice-Combinators.html][advice strategy]] is used instead of the more obvious ~:override~, because it needs to be possible to disable the override through setting ~org-html-markdown-style-footnotes~ to =nil=.
This isn't possible when using the ~:override~ strategy, which doesn't call the advice with a reference to the original function.


Finally, the package provides itself as ~ox-html-markdown-style-footnotes~:

#+name: provide
#+begin_src emacs-lisp
  (provide 'ox-html-markdown-style-footnotes)
#+end_src

* Installation and usage

Ox-html-markdown-style-footnotes is currently not available through any of the package registries.
Instead, install it from the git repository directly.
Install the package with [[https://github.com/jwiegley/use-package][use-package]] and [[https://github.com/radian-software/straight.el][straight.el]], and enable it by calling =org-html-markdown-style-footnotes-add=:

#+begin_src emacs-lisp
  (use-package ox-md-title
    :straight
    (ox-html-markown-style-footnotes :type git :host codeberg :repo "jkreeftmeijer/ox-html-markdown-style-footnotes.el")
    :config
    (org-html-markdown-style-footnotes-add))
#+end_src

After calling ~org-html-markdown-style-footnotes-add~, set the ~org-html-markdown-style-footnotes~ variable to to enable the package while exporting:

#+begin_src emacs-lisp
  (let ((org-html-markdown-style-footnotes t))
    (org-html-publish-to-html))
#+end_src

* Contributing

The git repository for ox-html-markdown-style-footnotes.el is hosted on [[https://codeberg.org/jkreeftmeijer/ox-html-markdown-style-footnotes.el][Codeberg]], and mirrored on [[https://github.com/jeffkreeftmeijer/ox-html-markdown-style-footnotes.el][GitHub]].
Contributions are welcome via either platform.

** Tests

Regression tests are written with [[https://www.gnu.org/software/emacs/manual/html_mono/ert.html][ERT]] and included in =test.el=.
To run the tests in batch mode, use =scripts/test=, or run the emacs batch command directly:

#+headers: :shebang #!/bin/sh
#+headers: :tangle scripts/test
#+begin_src shell
  emacs -batch -l ert -l test.el -f ert-run-tests-batch-and-exit
#+end_src

#+RESULTS:

** Screenshots

The README file for ox-html-markdown-style-footnotes includes screenshots to show what footnotes look like in an HTML page.
A script is included to generate these in ~scripts/screenshots.js~, which can be run by sourcing it in a shell:

#+begin_src shell
  ./scripts/screenshots.js
#+end_src

#+RESULTS:

The script loads puppeteer, then launches a headless browser, navigates to =test/fixtures/footnote.html=, takes the screenshot, and closes the browser:

#+headers: :shebang #!/usr/bin/env node
#+headers: :tangle scripts/screenshots.js
#+begin_src js
  const puppeteer = require('puppeteer');

  (async () => {
    const browser = await puppeteer.launch();
    const page = await browser.newPage();

    await page.setViewport({
      width: 800,
      height: 200,
      deviceScaleFactor: 4
    });

    await page.goto(`file://${__dirname}/../test/fixtures/footnote.html`);
    await page.waitForSelector('body');
    body = await page.$('body');
    await page.evaluate(() => { document.querySelector('body').style.padding = '32px'; });
    await body.screenshot({path: "./before.png"});

    await page.goto(`file://${__dirname}/../test/fixtures/footnote-2.html`);
    await page.waitForSelector('body');
    body = await page.$('body');
    await page.evaluate(() => { document.querySelector('body').style.padding = '32px'; });
    await body.screenshot({path: "./after.png"});

    await page.close();
    await browser.close();
  })()
#+end_src
